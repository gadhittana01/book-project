// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/book/persistent.go

// Package mock_book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	domain "gihub.com/gadhittana01/book-project/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// Mockpersistent is a mock of persistent interface.
type Mockpersistent struct {
	ctrl     *gomock.Controller
	recorder *MockpersistentMockRecorder
}

// MockpersistentMockRecorder is the mock recorder for Mockpersistent.
type MockpersistentMockRecorder struct {
	mock *Mockpersistent
}

// NewMockpersistent creates a new mock instance.
func NewMockpersistent(ctrl *gomock.Controller) *Mockpersistent {
	mock := &Mockpersistent{ctrl: ctrl}
	mock.recorder = &MockpersistentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockpersistent) EXPECT() *MockpersistentMockRecorder {
	return m.recorder
}

// borrowBook mocks base method.
func (m *Mockpersistent) borrowBook(ctx context.Context, req domain.BorrowBookReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "borrowBook", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// borrowBook indicates an expected call of borrowBook.
func (mr *MockpersistentMockRecorder) borrowBook(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "borrowBook", reflect.TypeOf((*Mockpersistent)(nil).borrowBook), ctx, req)
}

// getBookReservation mocks base method.
func (m *Mockpersistent) getBookReservation(ctx context.Context, req domain.GetBookReservationReq) (map[int][]domain.BorrowBookReq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBookReservation", ctx, req)
	ret0, _ := ret[0].(map[int][]domain.BorrowBookReq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getBookReservation indicates an expected call of getBookReservation.
func (mr *MockpersistentMockRecorder) getBookReservation(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBookReservation", reflect.TypeOf((*Mockpersistent)(nil).getBookReservation), ctx, req)
}